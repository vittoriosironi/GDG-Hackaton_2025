import google.generativeai as genai
from typing import List 
from database import search_summaries 
import datetime
import json
import os


def retrieve_documents_for_query(query: str) -> str:
    print(f"\n[Function Call Triggered] Action: RETRIEVE DOCUMENTS. Query for database: '{query}'")
    if not query:
        return "Error: No query provided for document retrieval."

    retrieved_docs_data = search_summaries(query_text=query, n_results=3) # La tua funzione di ricerca
    print("\n--- Documents retrieved from database ---")

    if retrieved_docs_data and retrieved_docs_data.get('documents') and retrieved_docs_data['documents'][0]:
        context_for_generation = []
        num_docs = len(retrieved_docs_data['documents'][0])
        
        for i in range(num_docs):
            doc_text = retrieved_docs_data['documents'][0][i]
            distance = 'N/A'
            if retrieved_docs_data.get('distances') and retrieved_docs_data['distances'][0] and i < len(retrieved_docs_data['distances'][0]):
                distance = retrieved_docs_data['distances'][0][i]
            
            metadata = {}
            if retrieved_docs_data.get('metadatas') and retrieved_docs_data['metadatas'][0] and i < len(retrieved_docs_data['metadatas'][0]):
                metadata = retrieved_docs_data['metadatas'][0][i]
            
            print(f"  Document {i+1}: {doc_text} (Distance: {distance})")
            if metadata:
                print(f"  Metadata: {metadata}")
            context_for_generation.append(f"Document {i+1}:\n{doc_text}\nMetadata: {metadata if metadata else 'None'}")
        
        return "\n\n---\n\n".join(context_for_generation)
    else:
        print("No documents found or error in retrieval.")
        return "No relevant documents found for the specified query. Please inform the user."

def rag_with_function_calling(user_question: str):
    
    model = genai.GenerativeModel(
        model_name='gemini-1.5-flash-latest', 
        tools=[retrieve_documents_for_query] 
    )
    
    chat = model.start_chat(enable_automatic_function_calling=True)
    current_timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S %Z")

    prompt = f"""
    You are an AI assistant. Your goal is to answer the user's question accurately and comprehensively.
    The current date and time is: {current_timestamp}. Use this information if the user's query is time-sensitive.

    You have access to the following tools:
    - `retrieve_documents_for_query(query: str)`: Use this tool when the user's question requires specific information, 
      up-to-date data, facts, or documents that might not be in your internal knowledge. 
      Formulate a clear and concise search query to retrieve the most relevant documents.
      After receiving the documents, use them to formulate your final answer.
    
    # Se hai aggiunto un'altra funzione (es. get_current_weather), descrivila qui:
    # - `get_current_weather(location: str, unit: str)`: Use this tool if the user asks about weather conditions.
    #   Provide the location and optionally the unit (celsius/fahrenheit).

    If you can answer the question directly using your internal knowledge without needing to search documents
    or use other tools, then answer directly. Do not use a tool if it's not strictly necessary.

    User's question:
    {user_question}

    Analyze the question and decide whether to answer directly or use one of the available tools.
    If you use a tool, wait for its results before formulating the final answer.
    """

    print(f"\n--- Sending question to Gemini with Function Calling capability ---")
    print(f"User question: {user_question}")
    try:
        response = chat.send_message(prompt)
        
        final_answer = response.text

        print(f"\n--- Answer generated by Gemini ---\n{final_answer}\n--------------------------------------------------")
        return final_answer

    except Exception as e:
        print(f"Unexpected error during RAG processing with function calling: {e}")
        import traceback
        traceback.print_exc()
        return "An error occurred while processing your request."


def __main__():
    api_key = "AIzaSyC0fy7MQ1lPNn3Mz4xzlWeBHPuhRJefzR8"
    if not api_key:
        print("WARNING: The GOOGLE_API_KEY environment variable is not set.")
        print("Please set the GOOGLE_API_KEY to run the code.")
        return 
    
    try:
        genai.configure(api_key=api_key)
        print("Google API Key configured successfully.")
    except Exception as e:
        print(f"Error configuring Google API: {e}")
        return

    question1 = "Tell me about productivity in today's programming sessions based on recent documents."
    question2 = "What is artificial intelligence?"

    print("\nProcessing Question 1 (likely requires retrieval)...")
    result1 = rag_with_function_calling(question1)
    print(f"\n--- Final Result for Question 1 ---\n{result1}\n------------------------------------")
    
    print("\n*************************************\n")
    
    print("\nProcessing Question 2 (direct answer likely)...")
    result2 = rag_with_function_calling(question2)
    print(f"\n--- Final Result for Question 2 ---\n{result2}\n------------------------------------")

if __name__ == "__main__":
    __main__()